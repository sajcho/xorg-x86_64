From 7b7170ecd636ae1110622e2430549f79598750ca Mon Sep 17 00:00:00 2001
From: Olivier Fourdan <ofourdan@redhat.com>
Date: Mon, 4 Apr 2022 14:28:15 +0200
Subject: [PATCH] xwayland/output: Set the "RANDR Emulation" property

Xwayland does not change the actual XRANDR setup for real, it just
emulates the resolution changes using viewports in Wayland.

With a single output, if an X11 applications tries to change the CRTC
back to the native mode, RRCrtcSet() will simply ignore the request as
no actual change is induced by this.

Set the property "RANDR Emulation" on all Xwayland outputs to make sure
the optimizations in RRCrtcSet() get skipped and Xwayland can receive
and act upon the client request.

Also make sure we do not allow that property to be changed by X11
clients.

v2: Prevent X11 clients from changing the property value
    (Pekka Paalanen <pekka.paalanen@collabora.com>)

Signed-off-by: Olivier Fourdan <ofourdan@redhat.com>
Reviewed-by: Hans de Goede <hdegoede@redhat.com>
Closes: https://gitlab.freedesktop.org/xorg/xserver/-/issues/1305
---
 hw/xwayland/xwayland-output.c | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/hw/xwayland/xwayland-output.c b/hw/xwayland/xwayland-output.c
index d2fa4e0bb..3ad8adc8b 100644
--- a/hw/xwayland/xwayland-output.c
+++ b/hw/xwayland/xwayland-output.c
@@ -720,6 +720,27 @@ static const struct zxdg_output_v1_listener xdg_output_listener = {
     xdg_output_handle_description,
 };
 
+#define XRANDR_EMULATION_PROP "RANDR Emulation"
+static Atom
+get_rand_emulation_property(void)
+{
+    const char *emulStr = XRANDR_EMULATION_PROP;
+
+    return MakeAtom(emulStr, strlen(emulStr), TRUE);
+}
+
+static void
+xwl_output_set_emulated(struct xwl_output *xwl_output)
+{
+    int32_t val = TRUE;
+
+    RRChangeOutputProperty(xwl_output->randr_output,
+                           get_rand_emulation_property(),
+                           XA_INTEGER,
+                           32, PropModeReplace, 1,
+                           &val, FALSE, FALSE);
+}
+
 struct xwl_output *
 xwl_output_create(struct xwl_screen *xwl_screen, uint32_t id)
 {
@@ -758,6 +779,7 @@ xwl_output_create(struct xwl_screen *xwl_screen, uint32_t id)
         ErrorF("Failed creating RandR Output\n");
         goto err;
     }
+    xwl_output_set_emulated(xwl_output);
 
     RRCrtcGammaSetSize(xwl_output->randr_crtc, 256);
     RROutputSetCrtcs(xwl_output->randr_output, &xwl_output->randr_crtc, 1);
@@ -896,6 +918,10 @@ xwl_randr_output_set_property(ScreenPtr pScreen,
                               Atom property,
                               RRPropertyValuePtr value)
 {
+    /* RANDR Emulation property is read-only. */
+    if (get_rand_emulation_property() == property)
+        return FALSE;
+
     return TRUE;
 }
 
-- 
GitLab

From 4119cd9ffaeb1d2ed554885668edd2b32d955256 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Thu, 12 May 2022 09:28:02 +0000
Subject: [PATCH] xwayland: Add some more xwayland fake modes

Adds the following 16:10 modes primarily for scaling up on Steam Deck:
 - 1152x720
 - 960x600
 - 928x580
 - 800x500
 - 768x480

Signed-off-by: Joshua Ashton <joshua@froggi.es>
Reviewed-by: Olivier Fourdan <ofourdan@redhat.com>
Reviewed-by: Hans de Goede <hdegoede@redhat.com>
---
 hw/xwayland/xwayland-output.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/hw/xwayland/xwayland-output.c b/hw/xwayland/xwayland-output.c
index 3ad8adc8b..927d97194 100644
--- a/hw/xwayland/xwayland-output.c
+++ b/hw/xwayland/xwayland-output.c
@@ -304,6 +304,11 @@ const int32_t xwl_output_fake_modes[][2] = {
     { 1680, 1050 },
     { 1440,  900 },
     { 1280,  800 },
+    { 1152,  720 },
+    {  960,  600 },
+    {  928,  580 },
+    {  800,  500 },
+    {  768,  480 },
     {  720,  480 }, /* 3:2 (1.5) */
     {  640,  400 },
     {  320,  200 },
-- 
GitLab

From 7cdcdfea08ad9d63466286a6f94783cbf5fc3717 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Thu, 12 May 2022 11:16:13 +0000
Subject: [PATCH] xwayland: Add -force-xrandr-emulation switch

Adds a -force-xrandr-emulation cmdline switch that always exposes extra
modes when viewporter isn't exposed by the Wayland compositor.

Having the additional modes exposed by the X server is important for
games to function and be configured

Compositors, such as Gamescope (the compositor for Steam Deck),
support only a single window that is rendered in the centre of the
screen that is scaled up to fill the screen by the compositor based
on some user scaling settings.

Exposing viewporter, wouldn't make sense here, and could mislead native
Wayland clients, so exposing dummy modesets in X is preferred here.

Signed-off-by: Joshua Ashton <joshua@froggi.es>
Reviewed-by: Olivier Fourdan <ofourdan@redhat.com>
---
 hw/xwayland/man/Xwayland.man  | 4 ++++
 hw/xwayland/xwayland-output.c | 2 +-
 hw/xwayland/xwayland-screen.c | 3 +++
 hw/xwayland/xwayland-screen.h | 1 +
 hw/xwayland/xwayland.c        | 1 +
 hw/xwayland/xwayland.pc.in    | 1 +
 6 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/hw/xwayland/man/Xwayland.man b/hw/xwayland/man/Xwayland.man
index 15eb7f5f4..2ceec9432 100644
--- a/hw/xwayland/man/Xwayland.man
+++ b/hw/xwayland/man/Xwayland.man
@@ -71,6 +71,10 @@ Disable touch pointer emulation. This allows the Wayland compositor to
 implement its own pointer emulation mechanism for X11 clients that don't
 support touch input.
 .TP 8
+.B \-force-xrandr-emulation
+Force additional non-native modes to be exposed when viewporter is not
+supported by the Wayland compositor.
+.TP 8
 .B \-rootless
 Run \fIXwayland\fP rootless, so that X clients integrate seamlessly with
 Wayland clients in a Wayland desktop. That requires the Wayland server
diff --git a/hw/xwayland/xwayland-output.c b/hw/xwayland/xwayland-output.c
index 927d97194..58764b7c3 100644
--- a/hw/xwayland/xwayland-output.c
+++ b/hw/xwayland/xwayland-output.c
@@ -355,7 +355,7 @@ output_get_rr_modes(struct xwl_output *xwl_output,
 
     *count = 1;
 
-    if (!xwl_screen_has_resolution_change_emulation(xwl_screen))
+    if (!xwl_screen_has_resolution_change_emulation(xwl_screen) && !xwl_screen->force_xrandr_emulation)
         return rr_modes;
 
     /* Add fake modes */
diff --git a/hw/xwayland/xwayland-screen.c b/hw/xwayland/xwayland-screen.c
index 5c8b388f0..d6e19282c 100644
--- a/hw/xwayland/xwayland-screen.c
+++ b/hw/xwayland/xwayland-screen.c
@@ -643,6 +643,9 @@ xwl_screen_init(ScreenPtr pScreen, int argc, char **argv)
             ErrorF("xwayland glamor: this build does not have EGLStream support\n");
 #endif
         }
+        else if (strcmp(argv[i], "-force-xrandr-emulation") == 0) {
+            xwl_screen->force_xrandr_emulation = 1;
+        }
     }
 
 #ifdef XWL_HAS_GLAMOR
diff --git a/hw/xwayland/xwayland-screen.h b/hw/xwayland/xwayland-screen.h
index f04d431c7..f8aee2bdc 100644
--- a/hw/xwayland/xwayland-screen.h
+++ b/hw/xwayland/xwayland-screen.h
@@ -56,6 +56,7 @@ struct xwl_screen {
     int rootless;
     int glamor;
     int present;
+    int force_xrandr_emulation;
 
     CreateScreenResourcesProcPtr CreateScreenResources;
     CloseScreenProcPtr CloseScreen;
diff --git a/hw/xwayland/xwayland.c b/hw/xwayland/xwayland.c
index 603e8be4f..6cc5f8e0f 100644
--- a/hw/xwayland/xwayland.c
+++ b/hw/xwayland/xwayland.c
@@ -102,6 +102,7 @@ ddxUseMsg(void)
     ErrorF("-verbose [n]           verbose startup messages\n");
     ErrorF("-version               show the server version and exit\n");
     ErrorF("-noTouchPointerEmulation  disable touch pointer emulation\n");
+    ErrorF("-force-xrandr-emulation   force non-native modes to be exposed when viewporter is not exposed by the compositor\n");
 }
 
 static int init_fd = -1;
diff --git a/hw/xwayland/xwayland.pc.in b/hw/xwayland/xwayland.pc.in
index 9d727b002..e2c06b801 100644
--- a/hw/xwayland/xwayland.pc.in
+++ b/hw/xwayland/xwayland.pc.in
@@ -12,3 +12,4 @@ have_listenfd=true
 have_verbose=true
 have_terminate_delay=true
 have_no_touch_pointer_emulation=true
+have_force_xrandr_emulation=true
-- 
GitLab

